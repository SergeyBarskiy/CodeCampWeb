<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".d.ts" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ assembly name="$(TargetDir)\CodeCamp.dll" #>
<#@ assembly name="System.ComponentModel.DataAnnotations.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#+  
    List<Type> knownTypes = new List<Type>();
	string Interface(Type t)
    {     
        var sb = new StringBuilder();
        sb.AppendFormat("\tinterface I{0} {{\n", t.Name);
        foreach (var mi in GetInterfaceMembers(t))
        {
			if (Nullable.GetUnderlyingType(((PropertyInfo)mi).PropertyType) != null)
			{
				sb.AppendFormat("\t\t{0}?: {1};\n", mi.Name, GetTypeName(mi));
			}
			else
			{
				sb.AppendFormat("\t\t{0}: {1};\n", mi.Name, GetTypeName(mi));
			}
            
        }
        sb.AppendLine("\t}");
        knownTypes.Add(t);
        return sb.ToString();
    }

    string Interface<T>()
    {   
        Type t = typeof(T);     
        var sb = new StringBuilder();
        sb.AppendFormat("\tinterface I{0} {{\n", t.Name);
        foreach (var mi in GetInterfaceMembers(t))
        {
			if(mi.Name != "PrimaryKey")
			{
				if (Nullable.GetUnderlyingType(((PropertyInfo)mi).PropertyType) != null)
				{
					sb.AppendFormat("\t\t{0}?: {1};\n", mi.Name, GetTypeName(mi));
				}
				else
				{
					sb.AppendFormat("\t\t{0}: {1};\n", mi.Name, GetTypeName(mi));
				}
            }
        }
        sb.AppendLine("\t}");
        knownTypes.Add(t);
        return sb.ToString();
    }

    IEnumerable<MemberInfo> GetInterfaceMembers(Type type)
    {
        return type.GetMembers(BindingFlags.Public | BindingFlags.Instance)
            .Where(mi => mi.MemberType == MemberTypes.Field || mi.MemberType == MemberTypes.Property);
    }

    string ToCamelCase(string s)
    {
        if (string.IsNullOrEmpty(s)) return s;
        if (s.Length < 2) return s.ToLowerInvariant();
        return char.ToLowerInvariant(s[0]) + s.Substring(1);
    }

    string GetTypeName(MemberInfo mi)
    {
        Type t = (mi is PropertyInfo) ? ((PropertyInfo)mi).PropertyType : ((FieldInfo)mi).FieldType;
        return this.GetTypeName(t);
    }

    string GetTypeName(Type t)
    {
        if(t.IsPrimitive)
        {
            if (t == typeof(bool)) return "Boolean";
            if (t == typeof(char)) return "string";
            return "number";
        }
        if (t == typeof(decimal)) return "number";            
        if (t == typeof(string)) return "string";
		if (t == typeof(DateTime)) return "Date";
        if (t.IsArray)
        {            
            var at = t.GetElementType();
            return this.GetTypeName(at) + "[]";
        }
        if(typeof (System.Collections.IEnumerable).IsAssignableFrom(t)) 
        {
            var collectionType = t.GetGenericArguments()[0]; // all my enumerables are typed, so there is a generic argument
            return GetTypeName(collectionType) + "[]";
        }            
        if (Nullable.GetUnderlyingType(t) != null)
        {
            return this.GetTypeName(Nullable.GetUnderlyingType(t));
        }
        if(t.IsEnum) return "number";
        if(knownTypes.Contains(t)) return "I" + t.Name;
        return "I" + t.Name;
    }

    string Enums<T>() // Enums<>, since Enum<> is not allowed.
    {
        Type t = typeof(T);        
        var sb = new StringBuilder();        
        int[] values = (int[])Enum.GetValues(t);
        sb.AppendLine("var ParticleKind = {");
        foreach(var val in values) 
        {
            var name = Enum.GetName(typeof(T), val);
            sb.AppendFormat("{0}: {1},\n", name, val);
        }
        sb.AppendLine("}");
        return sb.ToString();
    }
#>
